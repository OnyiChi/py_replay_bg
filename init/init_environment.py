import os
import time
from datetime import datetime 

def init_environment(modality, save_name, save_suffix, scenario,
                     bolus_source, basal_source, cho_source,
                     plot_mode, enable_log, verbose):
    """
    Initializes the 'environment' core variable.

    Parameters
    ----------
    modality : string
        A string that specifies if the function will be used to identify 
        the ReplayBG model on the given data or to replay the scenario specified by the given data
    save_name : string
        A string used to label, thus identify, each output file and result
    save_suffix : string
        A string to be attached as suffix to the resulting output files' name
    scenario: string
        A string that specifies whether the given scenario refers to a single-meal scenario or a multi-meal scenario
    bolus_source : string
        A string defining whether to use, during replay, the insulin bolus data contained in the `data` timetable (if `data`),
        or the boluses generated by the bolus calculator implemented via the provided `bolusCalculatorHandler` function
    basal_source : string
        A string defining whether to use, during replay, the insulin basal data contained in the `data` timetable (if `data`), 
        or the basal generated by the controller implemented via the provided `basalControllerHandler` function (if `dss`), 
        or fixed to the average basal rate used during identification (if `u2ss`)
    cho_source : string
        A string defining whether to use, during replay, the CHO data contained in the `data` timetable (if `data`), 
        or the CHO generated by the meal generator implemented via the provided `mealGeneratorHandler` function
    plot_mode : boolean
        A boolean that specifies whether to show the plot of the results or not
    enable_log : boolean
        A boolean that specifies whether to log the output of ReplayBG not
    verbose : boolean
        A boolean that specifies the verbosity of ReplayBG

    Returns
    -------
    environment : dict
        A dictionary that contains general parameters to be used by ReplayBG

    Raises
    ------
    None

    See Also
    --------
    None

    Examples
    --------
    None

    Copyright
    --------
    (C) 2023 Giacomo Cappon
    This file is part of ReplayBG.
    """
        
    if verbose:
        print('Setting up the environment...')
        tic = time.perf_counter()
    
    #Initialize the environment variable
    environment = {}

    #Set the absolute path of the ReplayBG tool
    environment['replay_bg_path'] = os.path.abspath('')
    
    #Create the results subfolders if they do not exist
    if not(os.path.exists(os.path.join(environment['replay_bg_path'], 'results'))):
        os.mkdir(os.path.join(environment['replay_bg_path'], 'results'))
    if not(os.path.exists(os.path.join(environment['replay_bg_path'], 'results', 'distributions'))):
        os.mkdir(os.path.join(environment['replay_bg_path'], 'results', 'distributions'))
    if not(os.path.exists(os.path.join(environment['replay_bg_path'], 'results', 'logs'))):
        os.mkdir(os.path.join(environment['replay_bg_path'], 'results', 'logs'))
    if not(os.path.exists(os.path.join(environment['replay_bg_path'], 'results', 'mcmc_chains'))):
        os.mkdir(os.path.join(environment['replay_bg_path'], 'results', 'mcmc_chains'))
    if not(os.path.exists(os.path.join(environment['replay_bg_path'], 'results', 'model_parameters'))):
        os.mkdir(os.path.join(environment['replay_bg_path'], 'results', 'model_parameters'))
    if not(os.path.exists(os.path.join(environment['replay_bg_path'], 'results', 'workspaces'))):
        os.mkdir(os.path.join(environment['replay_bg_path'], 'results', 'workspaces'))
    #Store the ReplayBG modality
    environment['modality'] = modality
    
    #Set the save name
    environment['save_name'] = save_name
    
    #Set the save suffix
    if save_suffix == '':
        environment['save_suffix'] = save_suffix
    else:
        environment['save_suffix'] = '_' + save_suffix
    
    #Create the log file associated to the simulation.
    environment['enable_log'] = enable_log # if False do not log 
    
    if environment['enable_log']:
        environment['log_file'] = os.path.join(environment['replay_bg_path'],'results','logs',str(datetime.now()) + '_' + environment['modality'] + '_' + environment['save_name'] + environment['save_suffix'] + '.txt')
        if os.path.exists(environment['log_file']):
            os.remove(environment['log_file'])
    else:
        environment['log_file'] = ''

    #Single-meal or multi-meal scenario?
    environment['scenario'] = scenario
    
    #Set input sources
    environment['bolus_source'] = bolus_source
    environment['basal_source'] = basal_source
    environment['cho_source'] = cho_source
    
    #Set the verbosity
    environment['plot_mode'] = plot_mode # if False do not plot 
    environment['verbose'] = verbose; # if False do not display stuff
    
    if environment['verbose']:
        toc = time.perf_counter()
        print(f"DONE. (Elapsed time {toc - tic:0.4f} seconds)")

    return environment 