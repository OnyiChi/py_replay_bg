from init.init_environment import init_environment
from init.init_model import init_model
from init.init_sensors import init_sensors

def init_core_variables(data, BW, modality, save_name, save_suffix, scenario, 
                        sample_time, glucose_model, pathology, exercise, seed,
                        bolus_source, basal_source, cho_source, 
                        cgm_model,
                        plot_mode, enable_log, verbose):
    """
    Initializes the core variables (i.e., environment, model, sensors, mcmc, and dss) of ReplayBG.

    Parameters
    ----------
    data : pd.DataFrame
        Pandas dataframe which contains the data to be used by the tool
    BW : double
        The patient's body weight
    modality : string
        A string that specifies if the function will be used to identify 
        the ReplayBG model on the given data or to replay the scenario specified by the given data
    save_name : string
        A string used to label, thus identify, each output file and result
    save_suffix : string
        A string to be attached as suffix to the resulting output files' name
    scenario: string
        A string that specifies whether the given scenario refers to a single-meal scenario or a multi-meal scenario
    sample_time: int
        An integer that specifies the data sample time (in minutes)
    glucose_model: string
        A string that specifies the glucose model to use
    pathology: string
        A string that specifies the patient pathology
    exercise: boolean
        A boolean that specifies whether to simulate exercise or not
    seed: int
        An integer that specifies the random seed. For reproducibility
    bolus_source : string
        A string defining whether to use, during replay, the insulin bolus data contained in the `data` timetable (if `data`),
        or the boluses generated by the bolus calculator implemented via the provided `bolusCalculatorHandler` function
    basal_source : string
        A string defining whether to use, during replay, the insulin basal data contained in the `data` timetable (if `data`), 
        or the basal generated by the controller implemented via the provided `basalControllerHandler` function (if `dss`), 
        or fixed to the average basal rate used during identification (if `u2ss`)
    cho_source : string
        A string defining whether to use, during replay, the CHO data contained in the `data` timetable (if `data`), 
        or the CHO generated by the meal generator implemented via the provided `mealGeneratorHandler` function
    cgm_model: string
        A string that specifies the cgm model to use
    plot_mode : boolean
        A boolean that specifies whether to show the plot of the results or not
    enable_log : boolean
        A boolean that specifies whether to log the output of ReplayBG not
    verbose : boolean
        A boolean that specifies the verbosity of ReplayBG

    Returns
    -------
    environment : dict
        A dictionary that contains general parameters to be used by ReplayBG
    model: dict
        A dictionary that contains general parameters of the physiological model
    sensors: dict
        A dictionary that contains general parameters of the sensors models
    mcmc: dict
        A dictionary that contains the hyperparameters of the MCMC identification procedure
    dss: dict
        A dictionary that contains the hyperparameters of the integrated decision support system

    Raises
    ------
    None

    See Also
    --------
    None

    Examples
    --------
    None

    Copyright
    --------
    (C) 2023 Giacomo Cappon
    This file is part of ReplayBG.
    """

    #Initialize the environment parameters
    environment = init_environment(modality = modality, save_name = save_name, save_suffix = save_suffix, scenario = scenario,
        bolus_source = bolus_source, basal_source = basal_source, cho_source = cho_source,
        plot_mode = plot_mode, enable_log = enable_log, verbose = verbose)
    
    #Initialize the model hyperparameters
    model = init_model(data, sample_time, glucose_model, pathology,
                     exercise, seed, environment)

    #Initialize sensors hyperparameters 
    sensors = init_sensors(cgm_model, model, environment)

    #TODO: set mcmc
    mcmc = [] 

    #TODO: set dss
    dss = []

    return environment, model, sensors, mcmc, dss