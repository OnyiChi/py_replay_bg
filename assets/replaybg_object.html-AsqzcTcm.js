import{_ as i,c as p,a as l,b as s,e,d as t,w as o,r,o as u}from"./app-D4J3UBtE.js";const d={};function c(m,n){const a=r("RouteLink");return u(),p("div",null,[n[20]||(n[20]=l(`<h1 id="the-replaybg-object" tabindex="-1"><a class="header-anchor" href="#the-replaybg-object"><span>The ReplayBG Object</span></a></h1><p>The <code>ReplayBG</code> object is the core, key, object to instatiate when starting to work with the ReplayBG framework.</p><p>Its constructor is formally defined as:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> py_replay_bg<span class="token punctuation">.</span>py_replay_bg <span class="token keyword">import</span> ReplayBG</span>
<span class="line"></span>
<span class="line">ReplayBG<span class="token punctuation">(</span>save_folder<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> blueprint<span class="token punctuation">:</span> <span class="token builtin">str</span> <span class="token operator">=</span> <span class="token string">&#39;single_meal&#39;</span><span class="token punctuation">,</span></span>
<span class="line">    yts<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">,</span> exercise<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">False</span><span class="token punctuation">,</span></span>
<span class="line">    seed<span class="token punctuation">:</span> <span class="token builtin">int</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">    plot_mode<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">,</span> verbose<span class="token punctuation">:</span> <span class="token builtin">bool</span> <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="input-parameters" tabindex="-1"><a class="header-anchor" href="#input-parameters"><span>Input parameters</span></a></h2><p>Let&#39;s inspect and describe each input parameter.</p>`,6)),s("ul",null,[s("li",null,[n[1]||(n[1]=s("code",null,"save_folder",-1)),n[2]||(n[2]=e(": a string defining the folder that will contain the results of the twinning procedure and the replay simulations. This parameter is mandatory. More information on how to set it can be found in ")),t(a,{to:"/documentation/results_folder.html"},{default:o(()=>n[0]||(n[0]=[e("The "),s("em",null,"results/",-1),e(" Folder")])),_:1}),n[3]||(n[3]=e(" page."))]),s("li",null,[n[5]||(n[5]=s("code",null,"blueprint",-1)),n[6]||(n[6]=e(", optional, ")),n[7]||(n[7]=s("code",null,"{'single-meal', 'multi-meal'}",-1)),n[8]||(n[8]=e(", default: ")),n[9]||(n[9]=s("code",null,"'single-meal'",-1)),n[10]||(n[10]=e(": a string that specifies the blueprint to be used to create the digital twin. More information on how to set it can be found in ")),t(a,{to:"/documentation/choosing_blueprint.html"},{default:o(()=>n[4]||(n[4]=[e("Choosing Blueprint")])),_:1}),n[11]||(n[11]=e(" page."))]),n[18]||(n[18]=l("<li><code>yts</code>, optional, default: <code>5</code> : an integer that specifies the data sample time (in minutes).</li><li><code>exercise</code>, optional, default: <code>False</code>: a boolean that specifies whether to simulate exercise or not.</li><li><code>seed</code>, optional, default: <code>1</code>: an integer that specifies the random seed. For reproducibility.</li>",3)),s("li",null,[n[13]||(n[13]=s("code",null,"plot_mode",-1)),n[14]||(n[14]=e(", optional, default: ")),n[15]||(n[15]=s("code",null,"True",-1)),n[16]||(n[16]=e(": a boolean that specifies whether to show the plot of the results or not. More information on how to visualize the results of ReplayBG can be found in ")),t(a,{to:"/documentation/visualizing_replay_results.html"},{default:o(()=>n[12]||(n[12]=[e("Visualizing Replay Results")])),_:1}),n[17]||(n[17]=e(" page."))]),n[19]||(n[19]=s("li",null,[s("code",null,"verbose"),e(", optional, default: "),s("code",null,"True"),e(": a boolean that specifies the verbosity of ReplayBG.")],-1))])])}const k=i(d,[["render",c],["__file","replaybg_object.html.vue"]]),f=JSON.parse('{"path":"/documentation/replaybg_object.html","title":"The ReplayBG Object","lang":"en-US","frontmatter":{"sidebar":"auto"},"headers":[{"level":2,"title":"Input parameters","slug":"input-parameters","link":"#input-parameters","children":[]}],"git":{"updatedTime":1733820853000,"contributors":[{"name":"Giacomo Cappon","email":"cappongiacomo@gmail.com","commits":3,"url":"https://github.com/Giacomo Cappon"}]},"filePathRelative":"documentation/replaybg_object.md"}');export{k as comp,f as data};
