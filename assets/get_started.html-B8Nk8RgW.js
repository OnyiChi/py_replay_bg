import{_ as o,c as i,a as l,b as a,e as s,d as e,w as t,r as c,o as u}from"./app-BClC6muO.js";const r={};function d(k,n){const p=c("RouteLink");return u(),i("div",null,[n[24]||(n[24]=l(`<h1 id="get-started" tabindex="-1"><a class="header-anchor" href="#get-started"><span>Get started</span></a></h1><h2 id="installation" tabindex="-1"><a class="header-anchor" href="#installation"><span>Installation</span></a></h2><p><strong>ReplayBG</strong> can be installed via pypi by simply</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">pip install py<span class="token operator">-</span>replay<span class="token operator">-</span>bg</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="requirements" tabindex="-1"><a class="header-anchor" href="#requirements"><span>Requirements</span></a></h3><ul><li>Python &gt;= 3.11</li><li>List of Python packages in <code>requirements.txt</code></li></ul><h2 id="preparation-imports-setup-and-data-loading" tabindex="-1"><a class="header-anchor" href="#preparation-imports-setup-and-data-loading"><span>Preparation: imports, setup, and data loading</span></a></h2><p>First of all import the core modules:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> os</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> freeze_support</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Here, <code>os</code> will be used to manage the filesystem, <code>numpy</code> and <code>pandas</code> to manipulate and manage the data to be used, and <code>multiprocessing.freeze_support</code> to enable multiprocessing functionalities and run the twinning procedure in a faster, parallelized way.</p><p>Then, we will import the necessary ReplayBG modules:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">from</span> py_replay_bg<span class="token punctuation">.</span>py_replay_bg <span class="token keyword">import</span> ReplayBG</span>
<span class="line"><span class="token keyword">from</span> py_replay_bg<span class="token punctuation">.</span>visualizer <span class="token keyword">import</span> Visualizer</span>
<span class="line"><span class="token keyword">from</span> py_replay_bg<span class="token punctuation">.</span>analyzer <span class="token keyword">import</span> Analyzer</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,12)),a("p",null,[n[3]||(n[3]=s("Here, ")),n[4]||(n[4]=a("code",null,"ReplayBG",-1)),n[5]||(n[5]=s(" is the core ReplayBG object (more information in the ")),e(p,{to:"/documentation/replaybg_object.html"},{default:t(()=>n[0]||(n[0]=[s("The ReplayBG Object")])),_:1}),n[6]||(n[6]=s(" page), while ")),n[7]||(n[7]=a("code",null,"Analyzer",-1)),n[8]||(n[8]=s(" and ")),n[9]||(n[9]=a("code",null,"Visualizer",-1)),n[10]||(n[10]=s(" are utility objects that will be used to respectively analyze and visualize the results that we will produce with ReplayBG (more information in the (")),e(p,{to:"/documentation/visualizing_replay_results.html"},{default:t(()=>n[1]||(n[1]=[s("Visualizing Replay Results")])),_:1}),n[11]||(n[11]=s(" and ")),e(p,{to:"/documentation/analyzing_replay_results.html"},{default:t(()=>n[2]||(n[2]=[s("Analyzing Replay Results")])),_:1}),n[12]||(n[12]=s(" pages)."))]),n[25]||(n[25]=l(`<p>Next steps consist of setting up some variables that will be used by ReplayBG environment. First of all, we will run the twinning procedure in a parallelized way so let&#39;s start with:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span></span>
<span class="line">    freeze_support<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, we will set the verbosity of ReplayBG:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">    verbose <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line">    plot_mode <span class="token operator">=</span> <span class="token boolean">False</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>Then, we need to decide what blueprint to use for twinning the data at hand.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">    blueprint <span class="token operator">=</span> <span class="token string">&#39;multi-meal&#39;</span></span>
<span class="line">    save_folder <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;..&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;..&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;..&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    parallelize <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,6)),a("p",null,[n[14]||(n[14]=s("For more information on how to choose a blueprint, please refer to the ")),e(p,{to:"/documentation/choosing_blueprint.html"},{default:t(()=>n[13]||(n[13]=[s("Choosing Blueprint")])),_:1}),n[15]||(n[15]=s(" page."))]),n[26]||(n[26]=l(`<p>Now, let&#39;s load some data to play with. In this example, we will use the data stored in <code>example/data/data_day_1.csv</code> which contains a day of data of a patient with T1D:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;..&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data_day_1.csv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">data<span class="token punctuation">.</span>t <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">&#39;t&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container warning"><p class="hint-container-title">Warning</p><p>Be careful, data in PyReplayBG must be provided in a <code>.csv.</code> file that must follow some strict requirements. For more information see the <a href="./data_requirements">Data Requirements</a> page.</p></div><p>Let&#39;s also load the patient information (i.e., body weight and basal insulin <code>u2ss</code>) stored in the <code>example/data/patient_info.csv</code> file.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">patient_info <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;..&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;patient_info.csv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">p <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>patient_info<span class="token punctuation">[</span><span class="token string">&#39;patient&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line"><span class="token comment"># Set bw and u2ss</span></span>
<span class="line">bw <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>patient_info<span class="token punctuation">.</span>bw<span class="token punctuation">.</span>values<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">u2ss <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>patient_info<span class="token punctuation">.</span>u2ss<span class="token punctuation">.</span>values<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>Finally, instantiate a <code>ReplayBG</code> object:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">rbg <span class="token operator">=</span> ReplayBG<span class="token punctuation">(</span>blueprint<span class="token operator">=</span>blueprint<span class="token punctuation">,</span> save_folder<span class="token operator">=</span>save_folder<span class="token punctuation">,</span></span>
<span class="line">               yts<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> exercise<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span></span>
<span class="line">               seed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">               verbose<span class="token operator">=</span>verbose<span class="token punctuation">,</span> plot_mode<span class="token operator">=</span>plot_mode<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="step-1-creation-of-the-digital-twin" tabindex="-1"><a class="header-anchor" href="#step-1-creation-of-the-digital-twin"><span>Step 1: Creation of the digital twin</span></a></h2><p>To create the digital twin, i.e., run the twinning procedure, using the MCMC method, use the <code>rbg.twin()</code> method:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">rbg<span class="token punctuation">.</span>twin<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span> bw<span class="token operator">=</span>bw<span class="token punctuation">,</span> save_name<span class="token operator">=</span><span class="token string">&#39;data_day_1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">         twinning_method<span class="token operator">=</span><span class="token string">&#39;mcmc&#39;</span><span class="token punctuation">,</span></span>
<span class="line">         parallelize<span class="token operator">=</span>parallelize<span class="token punctuation">,</span></span>
<span class="line">         n_steps<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span></span>
<span class="line">         u2ss<span class="token operator">=</span>u2ss<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,10)),a("p",null,[n[17]||(n[17]=s("For more information on the twinning procedure see the ")),e(p,{to:"/documentation/twinning_procedure.html"},{default:t(()=>n[16]||(n[16]=[s("Twinning Procedure")])),_:1}),n[18]||(n[18]=s(" page."))]),n[27]||(n[27]=a("h2",{id:"step-2-run-replay-simulations",tabindex:"-1"},[a("a",{class:"header-anchor",href:"#step-2-run-replay-simulations"},[a("span",null,"Step 2: Run replay simulations")])],-1)),a("p",null,[n[20]||(n[20]=s("Now that we have the digital twin created, it's time to replay using the ")),n[21]||(n[21]=a("code",null,"rbg.replay()",-1)),n[22]||(n[22]=s(" method. For more details see the ")),e(p,{to:"/documentation/replaying.html"},{default:t(()=>n[19]||(n[19]=[s("Replaying")])),_:1}),n[23]||(n[23]=s(" page."))]),n[28]||(n[28]=l(`<p>The possibilities are several, but for now let&#39;s just see what happens if we run a replay using the same input data used for twinning:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">replay_results <span class="token operator">=</span> rbg<span class="token punctuation">.</span>replay<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span> bw<span class="token operator">=</span>bw<span class="token punctuation">,</span> save_name<span class="token operator">=</span><span class="token string">&#39;data_day_1&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                            twinning_method<span class="token operator">=</span><span class="token string">&#39;mcmc&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                            save_workspace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">                            u2ss<span class="token operator">=</span>u2ss<span class="token punctuation">,</span></span>
<span class="line">                            save_suffix<span class="token operator">=</span><span class="token string">&#39;_step_2a&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>It is possible to visualize the results of the simulation using:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">Visualizer<span class="token punctuation">.</span>plot_replay_results<span class="token punctuation">(</span>replay_results<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>and analyzing the results using:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">analysis <span class="token operator">=</span> Analyzer<span class="token punctuation">.</span>analyze_replay_results<span class="token punctuation">(</span>replay_results<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Fit MARD: %.2f %%&#39;</span> <span class="token operator">%</span> analysis<span class="token punctuation">[</span><span class="token string">&#39;median&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;twin&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;mard&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Mean glucose: %.2f mg/dl&#39;</span> <span class="token operator">%</span> analysis<span class="token punctuation">[</span><span class="token string">&#39;median&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;glucose&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;variability&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;mean_glucose&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>As a second example, we can simulate what happens with different inputs, for example when we reduce insulin by 30%. To do that run:</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line">data<span class="token punctuation">.</span>bolus <span class="token operator">=</span> data<span class="token punctuation">.</span>bolus <span class="token operator">*</span> <span class="token number">.7</span></span>
<span class="line">replay_results <span class="token operator">=</span> rbg<span class="token punctuation">.</span>replay<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span> bw<span class="token operator">=</span>bw<span class="token punctuation">,</span> save_name<span class="token operator">=</span>save_name<span class="token punctuation">,</span></span>
<span class="line">                            twinning_method<span class="token operator">=</span><span class="token string">&#39;mcmc&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                            save_workspace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">                            u2ss<span class="token operator">=</span>u2ss<span class="token punctuation">,</span></span>
<span class="line">                            save_suffix<span class="token operator">=</span><span class="token string">&#39;_step_2b&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Visualize results</span></span>
<span class="line">Visualizer<span class="token punctuation">.</span>plot_replay_results<span class="token punctuation">(</span>replay_results<span class="token punctuation">)</span></span>
<span class="line"><span class="token comment"># Analyze results</span></span>
<span class="line">analysis <span class="token operator">=</span> Analyzer<span class="token punctuation">.</span>analyze_replay_results<span class="token punctuation">(</span>replay_results<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line"><span class="token comment"># Print, for example, the average glucose</span></span>
<span class="line"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Mean glucose: %.2f mg/dl&#39;</span> <span class="token operator">%</span> analysis<span class="token punctuation">[</span><span class="token string">&#39;median&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;glucose&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;variability&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;mean_glucose&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="full-example" tabindex="-1"><a class="header-anchor" href="#full-example"><span>Full example</span></a></h2><p>A <code>.py</code> file with the full code of the get started example can be found in <code>example/code/get_started.py</code>.</p><div class="language-python line-numbers-mode" data-highlighter="prismjs" data-ext="py" data-title="py"><pre><code><span class="line"><span class="token keyword">import</span> os</span>
<span class="line"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np</span>
<span class="line"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd</span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> multiprocessing <span class="token keyword">import</span> freeze_support</span>
<span class="line"></span>
<span class="line"><span class="token keyword">from</span> py_replay_bg<span class="token punctuation">.</span>py_replay_bg <span class="token keyword">import</span> ReplayBG</span>
<span class="line"><span class="token keyword">from</span> py_replay_bg<span class="token punctuation">.</span>visualizer <span class="token keyword">import</span> Visualizer</span>
<span class="line"><span class="token keyword">from</span> py_replay_bg<span class="token punctuation">.</span>analyzer <span class="token keyword">import</span> Analyzer</span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">&#39;__main__&#39;</span><span class="token punctuation">:</span></span>
<span class="line">    freeze_support<span class="token punctuation">(</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Set verbosity</span></span>
<span class="line">    verbose <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line">    plot_mode <span class="token operator">=</span> <span class="token boolean">False</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Set other parameters for twinning</span></span>
<span class="line">    blueprint <span class="token operator">=</span> <span class="token string">&#39;multi-meal&#39;</span></span>
<span class="line">    save_folder <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">&#39;..&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;..&#39;</span><span class="token punctuation">,</span><span class="token string">&#39;..&#39;</span><span class="token punctuation">)</span></span>
<span class="line">    parallelize <span class="token operator">=</span> <span class="token boolean">True</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Load data</span></span>
<span class="line">    data <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;..&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data_day_1.csv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    data<span class="token punctuation">.</span>t <span class="token operator">=</span> pd<span class="token punctuation">.</span>to_datetime<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token string">&#39;t&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Load patient_info</span></span>
<span class="line">    patient_info <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_csv<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>abspath<span class="token punctuation">(</span><span class="token string">&#39;&#39;</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">&#39;..&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;data&#39;</span><span class="token punctuation">,</span> <span class="token string">&#39;patient_info.csv&#39;</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span>
<span class="line">    p <span class="token operator">=</span> np<span class="token punctuation">.</span>where<span class="token punctuation">(</span>patient_info<span class="token punctuation">[</span><span class="token string">&#39;patient&#39;</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span></span>
<span class="line">    <span class="token comment"># Set bw and u2ss</span></span>
<span class="line">    bw <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>patient_info<span class="token punctuation">.</span>bw<span class="token punctuation">.</span>values<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    u2ss <span class="token operator">=</span> <span class="token builtin">float</span><span class="token punctuation">(</span>patient_info<span class="token punctuation">.</span>u2ss<span class="token punctuation">.</span>values<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    </span>
<span class="line">    <span class="token comment"># Instantiate ReplayBG</span></span>
<span class="line">    rbg <span class="token operator">=</span> ReplayBG<span class="token punctuation">(</span>blueprint<span class="token operator">=</span>blueprint<span class="token punctuation">,</span> save_folder<span class="token operator">=</span>save_folder<span class="token punctuation">,</span></span>
<span class="line">                   yts<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">,</span> exercise<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span></span>
<span class="line">                   seed<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span></span>
<span class="line">                   verbose<span class="token operator">=</span>verbose<span class="token punctuation">,</span> plot_mode<span class="token operator">=</span>plot_mode<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Set save name</span></span>
<span class="line">    save_name <span class="token operator">=</span> <span class="token string">&#39;data_day_1&#39;</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Step 1. Run twinning procedure</span></span>
<span class="line">    rbg<span class="token punctuation">.</span>twin<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span> bw<span class="token operator">=</span>bw<span class="token punctuation">,</span> save_name<span class="token operator">=</span>save_name<span class="token punctuation">,</span></span>
<span class="line">             twinning_method<span class="token operator">=</span><span class="token string">&#39;mcmc&#39;</span><span class="token punctuation">,</span></span>
<span class="line">             parallelize<span class="token operator">=</span>parallelize<span class="token punctuation">,</span></span>
<span class="line">             n_steps<span class="token operator">=</span><span class="token number">5000</span><span class="token punctuation">,</span></span>
<span class="line">             u2ss<span class="token operator">=</span>u2ss<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Step 2a. Replay the twin with the same input data</span></span>
<span class="line">    replay_results <span class="token operator">=</span> rbg<span class="token punctuation">.</span>replay<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span> bw<span class="token operator">=</span>bw<span class="token punctuation">,</span> save_name<span class="token operator">=</span>save_name<span class="token punctuation">,</span></span>
<span class="line">                                twinning_method<span class="token operator">=</span><span class="token string">&#39;mcmc&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                                save_workspace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">                                u2ss<span class="token operator">=</span>u2ss<span class="token punctuation">,</span></span>
<span class="line">                                save_suffix<span class="token operator">=</span><span class="token string">&#39;_step_2a&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Visualize results and compare with the original glucose data</span></span>
<span class="line">    Visualizer<span class="token punctuation">.</span>plot_replay_results<span class="token punctuation">(</span>replay_results<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># Analyze results</span></span>
<span class="line">    analysis <span class="token operator">=</span> Analyzer<span class="token punctuation">.</span>analyze_replay_results<span class="token punctuation">(</span>replay_results<span class="token punctuation">,</span> data<span class="token operator">=</span>data<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># Print, for example, the fit MARD and the average glucose</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Fit MARD: %.2f %%&#39;</span> <span class="token operator">%</span> analysis<span class="token punctuation">[</span><span class="token string">&#39;median&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;twin&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;mard&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Mean glucose: %.2f mg/dl&#39;</span> <span class="token operator">%</span> analysis<span class="token punctuation">[</span><span class="token string">&#39;median&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;glucose&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;variability&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;mean_glucose&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Step 2b. Replay the twin with different input data (-30% bolus insulin) to experiment how glucose changes</span></span>
<span class="line">    data<span class="token punctuation">.</span>bolus <span class="token operator">=</span> data<span class="token punctuation">.</span>bolus <span class="token operator">*</span> <span class="token number">.7</span></span>
<span class="line">    replay_results <span class="token operator">=</span> rbg<span class="token punctuation">.</span>replay<span class="token punctuation">(</span>data<span class="token operator">=</span>data<span class="token punctuation">,</span> bw<span class="token operator">=</span>bw<span class="token punctuation">,</span> save_name<span class="token operator">=</span>save_name<span class="token punctuation">,</span></span>
<span class="line">                                twinning_method<span class="token operator">=</span><span class="token string">&#39;mcmc&#39;</span><span class="token punctuation">,</span></span>
<span class="line">                                save_workspace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span></span>
<span class="line">                                u2ss<span class="token operator">=</span>u2ss<span class="token punctuation">,</span></span>
<span class="line">                                save_suffix<span class="token operator">=</span><span class="token string">&#39;_step_2b&#39;</span><span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Visualize results</span></span>
<span class="line">    Visualizer<span class="token punctuation">.</span>plot_replay_results<span class="token punctuation">(</span>replay_results<span class="token punctuation">)</span></span>
<span class="line">    <span class="token comment"># Analyze results</span></span>
<span class="line">    analysis <span class="token operator">=</span> Analyzer<span class="token punctuation">.</span>analyze_replay_results<span class="token punctuation">(</span>replay_results<span class="token punctuation">)</span></span>
<span class="line"></span>
<span class="line">    <span class="token comment"># Print, for example, the average glucose</span></span>
<span class="line">    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">&#39;Mean glucose: %.2f mg/dl&#39;</span> <span class="token operator">%</span> analysis<span class="token punctuation">[</span><span class="token string">&#39;median&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;glucose&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;variability&#39;</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">&#39;mean_glucose&#39;</span><span class="token punctuation">]</span><span class="token punctuation">)</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,11))])}const v=o(r,[["render",d],["__file","get_started.html.vue"]]),b=JSON.parse('{"path":"/documentation/get_started.html","title":"Get started","lang":"en-US","frontmatter":{"sidebar":"auto"},"headers":[{"level":2,"title":"Installation","slug":"installation","link":"#installation","children":[{"level":3,"title":"Requirements","slug":"requirements","link":"#requirements","children":[]}]},{"level":2,"title":"Preparation: imports, setup, and data loading","slug":"preparation-imports-setup-and-data-loading","link":"#preparation-imports-setup-and-data-loading","children":[]},{"level":2,"title":"Step 1: Creation of the digital twin","slug":"step-1-creation-of-the-digital-twin","link":"#step-1-creation-of-the-digital-twin","children":[]},{"level":2,"title":"Step 2: Run replay simulations","slug":"step-2-run-replay-simulations","link":"#step-2-run-replay-simulations","children":[]},{"level":2,"title":"Full example","slug":"full-example","link":"#full-example","children":[]}],"git":{"updatedTime":1733820853000,"contributors":[{"name":"Giacomo Cappon","email":"cappongiacomo@gmail.com","commits":7,"url":"https://github.com/Giacomo Cappon"}]},"filePathRelative":"documentation/get_started.md"}');export{v as comp,b as data};
